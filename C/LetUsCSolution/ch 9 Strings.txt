Notes:
*) const char *: This declares a pointer to a constant character. 
     ---------------
The const keyword means that the characters the pointer points to cannot be modified.
---------------------------------------------------------------------------------------
Q) Attempt the following.

                                          a)
gets() and scanf are typically used for reading input in C, but it's important to note that gets() 
is generally considered unsafe due to the lack of bounds checking, and its usage is discouraged.
 Instead, you might want to use fgets() for reading strings safely.

                                          b)
It attempts to read five space-separated strings from the input and store them in the arrays str1, str2, str3, str4.
 However, the input string "alice in wonder land" consists of four words, and there is no fifth string to be read. 
This will result in undefined behavior and might lead to unexpected results.

                                          d)
#include <stdio.h>
int stringToInteger(const char *a);
int main()
{
int result;
const char *a= "123";
result = stringToInteger(a);
printf("The output of %s String to Integer is =%d",a,result);
return 0;
}

int stringToInteger(const char *a)
{
int sum =0,i=0,sign=1;
if(a[0]=='-')
{
sign=-1;
i=1;
}
while(a[i]!='\0')
{
if(a[i]>='0' && a[i]<='9')
{
sum = sum*10+(a[i]-'0');
}
else
{
printf("Invalid character you will inseted at %c\n",a[i]);
}
i++;
}
return (sum*sign);
}
                    
                                  e)
#include <stdio.h>

void printChar(char ch, int n);
void generateFibonacciSeries(int n);

int main() {
    int output;
    printf("Enter the number of terms in the Fibonacci series: ");
    scanf("%d", &output);
    generateFibonacciSeries(output);

    return 0;
}

void printChar(char ch, int n) {
    int i;
    for (i = 0; i <= n; i++) {
        printf("%c\t", ch);
    }
}

void generateFibonacciSeries(int n) {
    char fibonacci[n + 1][100];
    int i, j, k;

    fibonacci[0][0] = 'a';
    fibonacci[0][1] = '\0';
    fibonacci[1][0] = 'b';
    fibonacci[1][1] = '\0';

    for (i = 2; i <= n; i++) {
        j = 0;
        while (fibonacci[i - 1][j] != '\0') {
            fibonacci[i][j] = fibonacci[i - 1][j];
            j++;
        }
        k = 0;
        while (fibonacci[i - 2][k] != '\0') {
            fibonacci[i][j + k] = fibonacci[i - 2][k];
            k++;
        }
        fibonacci[i][j + k] = '\0';
    }

    for (i = 0; i <= n; i++) {
        printf("f(%d) = \"", i);
        printChar(fibonacci[i][0], i);
        printf("%s\"\n", fibonacci[i] + 1);
    }
}
