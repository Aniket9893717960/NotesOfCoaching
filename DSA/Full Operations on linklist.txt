
#include <stdio.h>
#include <stdlib.h>

struct node 
{
int data;
struct node *add;
};
struct node *start=NULL,*temp,*New,*prev,*next;
int count=0,find=0,sum=0;

void create();
void insert();
void delete();
void display();
void reverse(struct node *);
void search(struct node *);
void submittion(struct node *);
void sorting();
void swapping(struct node *,struct node *);

void main()
{
int ch;
do
{
printf("-----------Linklist-------\n");
printf("Press 1: for Create \n");
printf("Press 2: for Insert \n");
printf("Press 3: for Delete \n");
printf("Press 4: for Display \n");
printf("Press 5: for Recursion Display \n");
printf("Press 6: for Search \n");
printf("Press 7: for Sum of all elements \n");
printf("Press 8: for Sorting of elements\n");
printf("Press 9: for Break \n");
printf("Choose the Elements \n");
scanf("%d",&ch);
switch(ch){
case 1: create();
break;

case 2:
if(start==NULL)
printf("Linklist is not Created\n"); 
else insert();
break;

case 3:
if(start==NULL)
printf("Linklist is not Created\n"); 
else delete();
break;

case 4:
if(start==NULL)
printf("Linklist is not Created\n"); 
else display();
break;

case 5:
if(start==NULL)
printf("Linklist is not Created\n"); 
else reverse(start);
break;

case 6:
if(start==NULL)
printf("Linklist is not Created\n"); 
else {
 printf("Enter the Element to find address\n");
 scanf("%d",&find);
 search(start);
 }
break;

case 7:
if(start==NULL)
printf("Linklist is not Created\n"); 
else submittion(start);
printf("Sum of all elements = %d",sum);
break;

case 8:
if(start==NULL)
printf("Linklist is not Created\n"); 
else sorting();
break;

case 9: break;
default:printf("invalid value");
}
}
while(ch!=9);
}

void create()
{
char ch;
int n;
printf("Enter the value \n");
scanf("%d",&n);
start = (struct node *)malloc(sizeof(struct node));
count++;
start -> data =n;
start -> add =NULL;
temp = start;
printf("For Entering the Next Value,Press 'Y' for yes \n");
scanf(" %c",&ch);
 while(ch=='Y' || ch=='y'){
 printf("Enter the value \n");
 scanf("%d",&n);
 count++;
 New = (struct node *)malloc(sizeof(struct node));
 New ->data =n;
 New ->add =NULL;
 temp ->add =New;
 temp =New;
 printf("For Entering the Next Value,Press 'Y' for yes \n");
 scanf(" %c",&ch);
 }
}



void insert()
{
int position,n,i=1;
printf("Enter a Value \n");
scanf("%d",&n);
New = (struct node *)malloc(sizeof(struct node));
New ->data =n;
New ->add =NULL;
printf("Enter a position");
scanf("%d",&position);
if(position==1){
New->add =start;
start =New;
count++;
}
else {
 if(position>count+1){
 printf("Invalid position the length of an entered no. would be =%d",count+1);
 }
 else if(position==count+1){
 next =start;
 while((next->add)!=NULL){
 prev =next;
 next =next->add;
 }
 next ->add =New;
 New =start;
 count++;
 }
 else {
 next =start;
 while(i<position)
 {
 prev =next;
 next =next->add;
 i++;
 }
 prev->add =New;
 New ->add =next;
  count++;
  }
 }
}

void delete(){
int position,i=1;
printf("Enter a position\n");
scanf("%d",&position);
if(position==1){
printf("Count = %d",count);
temp=start;
start = start->add;
printf("Deleted element = %d",temp->data);
free(temp);
count--;
}
else {
 if(position>count)
 printf("Invalid position the length of an entered no. would be =%d",count);
 else if(position==count){
 next=start;
 while((next->add)!=NULL){
 prev =next;
 next =next->add;
 }
  printf("Deleted Element is =%d",next->data);
  free(next);
  printf("Count = %d",count);
  count--;
  prev->add =NULL;
 }
 else {
 next =start;
  while(i<position){
  prev =next;
  next =next->add;
  i++;
  }
 printf("Count = %d",count);
 temp =next;
 prev->add =next->add;
 printf("Deleted element =%d",temp->data);
 free(temp);
 count--;
 }
 }
}

void display()
{
temp = start;
while((temp->add)!=NULL){
printf("%d\t",temp->data);
temp =temp->add;
}
}

void reverse(struct node *p){
if((p->add)!=NULL){
reverse(p->add);
printf("%d\t",p->data);
}
}

void search(struct node *p){
if((p->data)==find){
printf("You Entered value %d is found at %d Address",find,p->add);
}
else
   search(p->add);
}

void submittion(struct node *p){
if((p->add)!=NULL){
sum = sum+ p->data;
submittion(p->add);
}
}

void swapping(struct node *n1,struct node *n2){
 n1->data =(n1->data)^(n2->data);
 n2->data = (n2->data)^(n1->data);
 n1->data =(n1->data) ^(n2->data);
}

void sorting(){
struct node *temp1=start,*temp2;
int temp;
do{
temp2=start;
 while((temp2->add)!=NULL){
 if((temp2->data)>(temp1->data)){
  swapping(temp1,temp2);
 }
  temp2 = temp2 ->add;
 }
 temp1 = temp1 ->add;
 }
while((temp1->add)!=NULL);
}
